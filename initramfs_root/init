#!/bin/sh
# This code is under Simplified BSD License, see LICENSE for more info
# Copyright (c) 2010, Piotr Karbowski
# All rights reserved.

#set -e # exit on >0.
#set -x # debug

# Load functions.
. /functions.sh

# Basic
einfo "Mounting /proc"
run mount -t proc proc /proc

einfo "Mounting /sys"
run mount -t sysfs sysfs /sys

#Disable kernel messages from popping onto the screen
echo 0 > /proc/sys/kernel/printk
#Clear the screen
clear

einfo "better-initramfs started. Kernel version $(uname -r).\n"

## Import default value
luks=false
lvm=false
rescueshell=false
tuxonice=false

## Config.
if [ -f /config ]; then
	. /config
fi

# Process command line options
for i in $(cat /proc/cmdline); do
	case "${i}" in
		root\=*)
			root=$(get_opt $i)
		;;
		init\=*)
			init=$(get_opt $i)
		;;
		enc_root\=*)
			enc_root=$(get_opt $i)
		;;
		luks)
			luks=true
		;;
		lvm)
			lvm=true
		;;
		rescueshell)
			rescueshell=true
		;;
		tuxonice)
			tuxonice=true
		;;
		resume\=*)
			resume=$(get_opt $i)
		;;
		rootfstype\=*)
			rootfstype=$(get_opt $i)
		;;
		rootdelay\=*)
			rootdelay=$(get_opt $i)
		;;
	esac
done
####

einfo "Create all the symlinks to /bin/busybox."
run busybox --install -s

if [ ! -z $rootdelay ]; then
	ewarn "Waiting $(get_opt $rootdelay) sec before init /dev."
	run sleep $(get_opt $rootdelay)
fi

einfo "Initiating /dev dir"
run mknod /dev/null c 1 3
run mknod /dev/tty c 5 0
run echo /sbin/mdev > /proc/sys/kernel/hotplug
run mdev -s

if [ -z $root ]; then
        eerror "Your root= env is empty, this is fatal."
        droptoshell
fi

if [ -z $init ]; then
	init="/sbin/init"
fi

if [ $lvm = "true" ]; then
	einfo "Getting LVM volumes up (if any)."
	#run lvm vgscan
	run lvm vgchange -a y
fi

if [ $luks = "true" ]; then
	if [ -z $enc_root ]; then
		eerror "You have enabled luks but your \$enc_root variable is empty."
		droptoshell
	fi
	
	einfo "Opening encrypted partition and mapping to /dev/mapper/enc_root."
	run cryptsetup luksOpen "${enc_root}" enc_root

	if [ $lvm = "true" ]; then
		einfo "Again, getting LVM volumes up (if any, after map dmcrypt)."
		run lvm vgscan
		run lvm vgchange -a y
	fi
fi

if [ $rescueshell = "true" ]; then
	droptoshell
fi

if [ $tuxonice = "true" ]; then
	if [ ! -z $resume ]; then
		if [ ! -f /sys/power/tuxonice/do_resume ]; then
			ewarn "Your kernel do not support TuxOnIce.";
		else
			einfo "Sending do_resume signal to TuxOnIce."
			run echo 1 > /sys/power/tuxonice/do_resume
		fi
	else
		ewarn "resume= variable is empty, not cool, skipping tuxonice."
	fi
fi

#Mount the root device
mountparams="-o ro"

if [ ! -z $rootfstype ]; then
	mountparams="$mountparams -t $rootfstype"
fi

einfo "Mounting rootfs to /newroot"
run mount $mountparams "${root}" /newroot

#Unmount all other mounts so that the ram used by
#the initramfs can be cleared after switch_root
einfo "Umounting /sys and /proc."
run umount /sys /proc

#Switch to the new root and execute init
if [[ -x "/newroot/${init}" ]] ; then
	einfo "Switching root to /newroot and executing /sbin/init."
	exec switch_root /newroot "${init}"
fi

ewarn "Something goes wrong."
droptoshell
